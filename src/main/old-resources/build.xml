<?xml version = "1.0" encoding = "utf-8"?>
<project name="VOWL" default="jar" basedir=".">

	<!-- Set the java version -->
	<property name="targetVersion" value="1.6"/>

	<!-- Load user specific properties like protege.home -->
	<property file="local.properties"/>

	<!-- Specify the plugin name without the file extension -->
	<property name="plugin" value="org.visualdataweb.vowl"/>

	<!-- Specify build related files and directories -->
	<property name="src" location="./src"/>
	<property name="build" location="./build"/>
	<property name="classes" location="${build}/classes"/>
	<property name="lib" location="./lib"/>
	<property name="genlib" location="${build}/lib"/>
	<property name="manifest" location="${build}/manifest.mf"/>

	<!-- Load and set Protege properties -->
	<property file="${protege.home}/build.properties"/>
	<property name="protege.common" location="${protege.home}/bundles"/>
	<property name="protege.plugins" location="${protege.home}/plugins"/>
	<property name="run.config" location="${protege.home}/config.xml"/>

	<!-- Specify the libraries of Protege -->
	<property name="equinox.common"
	          location="${protege.common}/org.eclipse.equinox.common.jar"/>
	<property name="equinox.registry"
	          location="${protege.common}/org.eclipse.equinox.registry.jar"/>
	<property name="protege.lib"
	          location="${protege.common}/org.protege.editor.core.application.jar"/>
	<property name="common.lib"
	          location="${protege.common}/org.protege.common.jar"/>
	<property name="owl.lib"
	          location="${protege.plugins}/org.semanticweb.owl.owlapi.jar"/>


	<!-- Initialize the build directories -->
	<target name="init">
		<tstamp>
			<format property="build.time" pattern="yyyy_MM_dd_hhmm"/>
		</tstamp>
		<mkdir dir="${build}"/>
		<mkdir dir="${classes}"/>
		<mkdir dir="${classes}/lib"/>
		<mkdir dir="${genlib}"/>
	</target>

	<!-- Build the libraries -->
	<target name="buildlibs" depends="init, checkProtegeLibsAndReport">
		<unjar dest="${build}"
		       src="${common.lib}">
			<patternset>
				<include name="**/log4j.jar"/>
				<include name="**/looks.jar"/>
			</patternset>
		</unjar>
	</target>

	<!-- Compile the project -->
	<target name="compile" depends="buildlibs, checkProtegeLibsAndReport">
		<javac srcdir="${src}"
		       destdir="${classes}"
		       debug="on"
		       includeAntRuntime="false"
		       target="${targetVersion}"
		       source="${targetVersion}"
		       bootclasspath="${rtjar}">
		<classpath refid="project.classpath"/>
		</javac>
	</target>

	<!-- Create the jar archive from the compiled sources -->
	<target name="jar" depends="compile, copy.resources">
		<jar jarfile="${build}/${plugin}.jar"
		     basedir="${classes}"
		     manifest="${build}/manifest.mf"/>
	</target>

	<!-- Try to copy the created jar archive into the plugin directory (may fail because of missing permissions) -->
	<target name="install" depends="jar">
		<delete dir="${protege.home}/configuration/org.eclipse.core.runtime"/>
		<delete dir="${protege.home}/configuration/org.eclipse.osgi"/>
		<copy file="${build}/${plugin}.jar"
		      todir="${protege.plugins}"
		      overwrite="true"/>
	</target>

	<!-- Removes everything related to the build -->
	<target name="clean">
		<delete dir="${build}"/>
	</target>


	<!-- Copies resources into the classes directory -->
	<target name="copy.resources" depends="build.manifest">
		<copy todir="${classes}">
			<fileset dir="${src}">
				<include name="**/*"/>
				<exclude name="**/*.java"/>
				<exclude name="**/MANIFEST.MF"/>
				<exclude name="**/manifest.mf"/>
			</fileset>
		</copy>
		<copy todir="${classes}/lib">
			<fileset dir="${lib}" excludes="junit*.jar"/>
		</copy>
		<copy todir="${classes}">
			<fileset dir="." includes="*.xml">
				<exclude name="build.xml"/>
			</fileset>
		</copy>
		<!-- the manifest doesn't belong here but this is good for IDE's -->
		<mkdir dir="${classes}/META-INF"/>
		<copy todir="${classes}/META-INF"
		      file="${manifest}"/>
	</target>

	<!-- Checks whether the Protege home is correctly set -->
	<target name="checkProtegeHome">
		<condition property="protege.home.set">
			<available file="${protege.home}/org.protege.editor.core.application.jar" type="file"/>
		</condition>
	</target>

	<!-- Prints the Protege home directory -->
	<target name="useProtegeHome" depends="checkProtegeHome" if="protege.home.set">
		<echo message="Using Protege Home = ${protege.home} to find protege jars"/>
	</target>

	<!-- Checks whether all Protege libraries are available and builds the class path -->
	<target name="checkProtegeLibs" depends="useProtegeHome">
		<echo message="**********************************************************"/>
		<echo message="Using Protege Home = ${protege.home}"/>
		<echo message="Using Java Version = ${targetVersion}"/>
		<echo message="**********************************************************"/>
		<property name="owl.editor.jar"
		          location="${protege.plugins}/org.protege.editor.owl.jar"/>
		<condition property="libs.found">
			<and>
				<available file="${protege.osgi}" type="file"/>
				<available file="${equinox.common}" type="file"/>
				<available file="${equinox.registry}" type="file"/>
				<available file="${owl.editor.jar}" type="file"/>
				<available file="${owl.lib}" type="file"/>
			</and>
		</condition>
		<path id="project.classpath">
			<pathelement location="${protege.osgi}"/>
			<pathelement location="${protege.lib}"/>
			<pathelement location="${equinox.common}"/>
			<pathelement location="${equinox.registry}"/>
			<pathelement location="${owl.editor.jar}"/>
			<pathelement location="${owl.lib}"/>
			<fileset dir="${lib}"/>
			<fileset dir="${genlib}"/>
		</path>
	</target>

	<!-- Reports if the Protege libraries are missing -->
	<target name="checkProtegeLibsAndReport" depends="checkProtegeLibs"
	        unless="libs.found">
		<echo message="Missing protege libraries.  You need to set "/>
		<echo message="the PROTEGE_HOME environment variable to a"/>
		<echo message="protege installation directory where the"/>
		<echo message="appropriate plugins have been installed."/>
		<echo message="Alternatively set the jar libs in local.properties (protege.lib=...)"/>
		<echo message="Use the -v option to ant to see what jars are missing."/>
		<fail message="missing protege libraries"/>
	</target>

	<!-- Prints the usage of this ant file -->
	<target name="usage">
		<echo message="To run this script set the PROTEGE_HOME environment"/>
		<echo message="variable and use one of the following targets"/>
		<echo message="jar - builds the jar (bundle) file for this project"/>
		<echo message="install - installs  the bundle into the Protege distribution"/>
		<echo message="copy.resources - copyies resources into the classes directory"/>
		<echo message="    this can  be useful for ide developers - see the wiki"/>
		<echo message="run - runs Protege (requires that Protege has been installed)"/>
		<echo message="debug - starts Protege with the debugger using port 8500"/>
	</target>

	<!-- Copies and updates the manifest file -->
	<target name="build.manifest">
		<copy tofile="${manifest}"
		      file="META-INF/MANIFEST.MF" overwrite="true"/>
		<manifest file="${manifest}"
		          mode="update">
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Build-Date" value="${build.time}"/>
		</manifest>
	</target>

	<!-- Runs the project -->
	<target name="run" depends="jar">
		<java fork="true"
		      dir="${protege.home}"
		      classname="org.protege.osgi.framework.Launcher">
			<jvmarg value="-Dlog4j.configuration=file:log4j.xml"/>
			<jvmarg value="-Xmx1500M"/>
			<jvmarg value="-Dorg.protege.launch.config=${run.config}"/>
			<classpath>
				<pathelement path="${protege.osgi}"/>
				<pathelement path="${protege.launcher}"/>
			</classpath>
		</java>
	</target>

	<!-- Runs the project in debugging mode -->
	<target name="debug" depends="jar">
		<java fork="true" dir="${protege.home}"
		      classname="org.protege.osgi.framework.Launcher">
			<jvmarg value="-Dlog4j.configuration=file:log4j.xml"/>
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8500,server=y,suspend=y"/>
			<jvmarg value="-Xmx1500M"/>
			<jvmarg value="-Dorg.protege.launch.config=${run.config}"/>
			<classpath>
				<pathelement path="${protege.osgi}"/>
				<pathelement path="${protege.launcher}"/>
			</classpath>
		</java>
	</target>

</project>